Somsasekhar ====> Person eligibility for voting. 
Nagagopichand   ===> 100 people voting and for them eligibility needs to be checked.
 

----------------------------------------------------------------------------------------------------------------------------------
Q Can we convert this scenario into a code?
A Yes
class Person1{
       public static void main(String args[]) {
              String name="Rahul";
              int age=21;
              if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              }
       }
     }   


class Person1b{
       public static void main(String args[]) {
              String name="Rahul";
              int age=21;
              String comment;
              if(age>=18){
                    comment="Eligible for voting";
              }
              else{
                   comment="Not eligible";
                  }
            System.out.println(comment);
       }
     }   


         
 
Q We need to store the details of 100 persons with our limited knowledge. 
A * Taking Array
  * List 
  * for loop
  * Scanner to take user input
class Person2{
     public static void main(String args[]) {
      String name1="Ravi";
      String name2="Ashok";
      String name3="Atul";
      int age_of_name1=20;
      int age_of_name2=18;
  
     }
}
-------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

class Person3{
     public static void main(String args[]) {
         Scanner scan=new Scanner(System.in);  
         int numberOfPeople=100;
         int age;
         String name;
         for(int ctr=1;ctr<=numberOfpeople;ctr++){
             System.out.println("Enter the name");
              name=scan.next();
              System.out.println("Enter the age");
              age=scan.nextInt();
              if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
         } 
 
     }
}

In the above example we are not able to retain the name and age as they are 
getting overwritten by the next value. 
-----------------------------------------------------------------------------------------------------------------------------------
If we talk about person,book,employee,student these are real life entities. 

// The below code wont work because we cannot access non static member from static member
// Cannot make a static reference to the non-static field age
//  Cannot make a static reference to the non-static field name
class Person4a{
     int age;
     String name;
  
    public static void main(String args[]) {
          
            age=18;
            name="Ravi";
            System.out.println(age);
            System.out.println(name);

     }



}

class Person4b{
    static int age;
    static String name;
  
    public static void main(String args[]) {
          
            age=18;
            name="Ravi";
            System.out.println(age);
            System.out.println(name);

     }



}



[In the above code we have kept the roll and name outside the main method
now in the above code roll and name are not local to main method. They are 
now being called as instance variables/member variables/attributes/properties.]


Q How are we going to access the roll and name from main method? Is it the same 
way as before?
A No. We cannot access non static member from static member or block. 


Q Do we have any way out to access the non static member from the static main method?
A Yes. Create an object of the class and with the object access the members.


class Person5{
    int age;
    String name;
  
    public static void main(String args[]) {
            Person5 p=new Person5();
            p.age=19;
            p.name="Ravi";
            System.out.println(p.age);
            System.out.println(p.name);
              if(p.age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 


     }



}


In the above example p is a reference variable which is holding the reference or address
of the newly created object. 
      new Person5(); ===> with new the object is getting created during the runtime .

Person5 p=new Person5();==> In the reference variable p we are storing the address of
the object which got created with new Person5();
The object creation is a two step process.

 Person5 p=null; // p is a reference variable which currently not having any address for an object.
p=new Person5(); // In the reference variable p we are storing the address of the newly created object.
OR
Person5 p=new Person5(); 

similar to writing

int num=10; // declaration and initialisation in the same line.
------------------------------------------------------------------------------------------------------------------------------
Q Still we have not achieved the solution for storing 100 Persons.
A yes.
----------------------------------------------------------------------------------------------------------------
OOP helps a programmer in breaking down the code into smaller modules. These modules (classes) will have state(represented by attributes/variables) and functionality (represented by behavior/methods).

Q I know only one method that is main. So can we write some more methods in the class?
A Yes

class Person6{
    int age;
    String name;
  
     void displayData(){
       age=10;
       name="Akash";
       System.out.println(age);
       System.out.println(name);
        if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
      } 

    public static void main(String args[]) {
            Person6 p=new Person6();
            p.displayData();
     }



}
Q Okie we wrote a displayData() method. Can we plan in such a way that one method will be
for initialising the member variables and another method will be for display of data?
A yes 

public class Person7 {
int age;
String name;

void setData() {
	 age=19;
	 name="Rajesh";	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	
	public static void main(String[] args) {
		Person7 per=new Person7();
		per.setData();
		per.dispData();
		Person7 per2=new Person7();
		per2.dispData();
	}

}
[ In the above code setData and displayData are member methods/functions/behaviour of a class. ]

-----------------------------------------------------------------------------------------------------------------------------------
public class Person8 {
int age;
String name;
void setData() {
	 age=19;
	 name="Rajesh";	
}

 void dispData() {
	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	public static void main(String[] args) {
		Person8 per1=new Person8();
		per1.setData();
		per1.dispData();
		Person8 per2=new Person8();
		per2.setData();
		per2.dispData();
	}

}
 
[ In the above code both the objects are having the same data ]

Q Do we have a solution so that the objects will have different set of data?
A Yes we have two ways
   * Use of Scanner object
   * Passing parameters to the method setData

The first solution:-

import java.util.Scanner;

public class Person9 {
int age;
String name;
// For import press ctr+shift+o
void setData() {
	
	Scanner scan=new Scanner(System.in);
	System.out.println("Enter the age");
	 age=scan.nextInt();
	System.out.println("Enter the name");
	 name=scan.next();	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	
	public static void main(String[] args) {
		Person9 per1=new Person9();
		per1.setData();
		
		Person9 per2=new Person9();
		
		per2.setData();
		System.out.println("The data ");
		per1.dispData();
		per2.dispData();
	}

}



public class Person10 {
int age;
String name;
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData(int a,String n) {
	 age=a;
	 name=n;	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
public static void main(String[] args) {
		Person10 per1=new Person10();
		per1.setData(18,"Ram");
		
		Person10 per2=new Person10();
		per2.setData(20,"Ashok");
		
		System.out.println("The data ");
		per1.dispData();
		per2.dispData();
	}

}
--------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

public class Person11 {
int age;
String name;
Scanner scan=new Scanner(System.in);
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData() {
         System.out.println("Enter age");
	 age=scan.nextInt();
         System.out.println("Enter name");
	 name=scan.next();	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
           if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	
	public static void main(String[] args) {
		Person11 per1=new Person11();
		per1.setData(18,"Ram");
	        int ch;
                System.out.println("Enter your choice);
                ch=per1.scan.nextInt();	
		Person11 per2=new Person11();
		per2.setData(20,"Ashok");
		
		System.out.println("The data ");
		per1.dispData();
		per2.dispData();
	}

}
-------------------------------------------------------------------------------------------------
class Customer {

	 String customerId;
	String customerName;
	 long contactNumber;
	String address;

	 void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***************************");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}

}

 class Tester{

	public static void main(String[] args) {

		// Object creation
		Customer customer = new Customer();

		// Assigning values to the instance variables
		customer.customerId = "C101";
		customer.customerName = "Stephen Abram";
		customer.contactNumber = 7856341287L;
		customer.address = "D089, St. Louis Street, Springfield, 62729";

		// Displaying the customer details
		customer.displayCustomerDetails();
		// Move the above statement immediately after the object creation
		// statement and observe the output

	}

}
------------------------------------------------------------------------------
Q We have kept the display of being eligible or not in the same method displayData().
  Can we write it in a different method?
A yes

public class Person12 {
int age;
String name;
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData(int a,String n) {
	 age=a;
	 name=n;	
}

void dispData() {

	 System.out.println(age);
	 System.out.println(name);
       
 }

 void isEligible(){
   if(age>=18){
               System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 

}

public static void main(String[] args) {
		Person12 per1=new Person12();
		per1.setData(18,"Ram");
                
		
		Person12 per2=new Person12();
		per2.setData(20,"Ashok");
                 
		
		System.out.println("The data ");
          
		per1.dispData();
                per1.isEligible();
		per2.dispData();
                per2.isEligible();
	}

}

------------------------------------------------------------------------------------------------
We want to enter Bookdetails name,actualPrice,quantityOrdered,priceAfterDiscount. If the price of the book is more than 1000 or quantity ordered is more than 10, give a discount of 10% otherwise priceAfterDiscount will be same as the actualPrice.
[ FOLLOW THIS TECHNIQUE ]
class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;

 void setBookDetails(String bn,int ap,int qo){
     bookName=bn;
     actualPrice=ap;
     quantityOrdered=qo;
  }

   void displayData(){

   }

   void discountCalculation(){


   } 

   public static void main(String args[]) {
       Book book=new Book();
       book.setBookDetails("Java",500,11);
       book.displayData();
       book.discountCalculation();
       Book book2=new Book();
       book2.setBookDetails("HTML",200,2);
       book2.displayData();
       book2.discountCalculation();
  
   }
}
-----------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;

 void setBookDetails(String bn,int ap,int qo){
     bookName=bn;
     actualPrice=ap;
     quantityOrdered=qo;
  }

   void displayData(){

   }

   void discountCalculation(){


   } 

   public static void main(String args[]) {
       Book book=new Book();
       Scanner scan=new Scanner(System.in);
       System.out.println("Enter the bookName");
       String name=scan.next(); 
       System.out.println("Enter the actual price");
       int price=scan.nextInt();
       System.out.println("Enter the quantity on hand");
       int qo=scan.nextInt();
       book.setBookDetails(name,price,qo);
       book.displayData();
       book.discountCalculation();
  
   }
}
---------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;
 


 void setBookDetails(){
       Scanner scan=new Scanner(System.in);
       System.out.println("Enter the bookName");
       bookName=scan.next(); 
       System.out.println("Enter the actual price");
       actualPrice=scan.nextInt();
       System.out.println("Enter the quantity on hand");
       quantityOrdered=scan.nextInt();
  }

   void displayData(){

   }

   void discountCalculation(){


   } 

   public static void main(String args[]) {
       Book book=new Book();
       book.setBookDetails();
       book.displayData();
       book.discountCalculation();
  
   }
}
--------------------------------------------------------------------------------------------------------------------------

  access_specifier return_type method_name(datatype parameter1,datatype parameter2,datatype parameterN){


  }

Access modifier – defines the access type of the method. You will learn more about this later in the course. 

Return type – the data type of the value returned by the method or void if nothing is returned 

Method name – name of the method 

Parameters – comma separated input values passed to the method, should be () if no parameters are passed 

Method body – the code that defines the functionality of the method 

 ---------------------------------------------------------------------------------------------------------------------------------
We want to enter Bookdetails name,actualPrice,quantityOrdered,priceAfterDiscount. If the price of the book is more than 1000 or quantity ordered is more than 10, give a discount of 10% . If the price of the book is more than 5000 or quantity ordered is more than 50,
give a discount of 20% otherwise give a discount of 5%.




public class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;

  void setBookDetails(String bn,int ap,int qo){
     bookName=bn;
     actualPrice=ap;
     quantityOrdered=qo;
  }
 
   void displayData(){
    System.out.println(bookName);
    System.out.println(actualPrice);
    System.out.println(quantityOrdered);
    System.out.println(priceAfterDiscount);
   }

   void discountCalculation(int discount){
     priceAfterDiscount=actualPrice-actualPrice*((float)discount/100);

   } 

   public static void main(String args[]) {
       Book book=new Book();
       book.setBookDetails("Java",500,11);
      if(book.actualPrice>5000 || book.quantityOrdered>50)
          {
           book.discountCalculation(20);
          }
      else if(book.actualPrice>1000  ||  book.quantityOrdered>10)
          {
           book.discountCalculation(10);
          }
       else
        {
         book.discountCalculation(5);
        }
         book.displayData();  

    }  
}

----------------------------------------------------------------------------------------------------------------------------------
Q When we should have parameterized methods?
A When method needs to work with different values for different execution or different objects.
-------------------------------------------------------------------------------------------------------------------------

public class Person13 {
int age;
String name;
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData(int a,String n) {
	 age=a;
	 name=n;	
}

void dispData() {

	 System.out.println(age);
	 System.out.println(name);
       
 }

 boolean isEligible(){
   if(age>=18){
              return true;
              }
              return false;
 }

public static void main(String[] args) {
		Person13 per1=new Person13();
		per1.setData(18,"Ram");
                
		
		Person13 per2=new Person13();
		per2.setData(15,"Ashok");
                 
		
		System.out.println("The data ");
          
		per1.dispData();
                boolean eligible=per1.isEligible();
                if(eligible) // if(eligible==true) {}
                   {
		   System.out.println("Eligible to vote");
                   } 
                 else{
                   System.out.println("Not eligible to vote");
                   }
                   per2.dispData(); 
                   eligible=per2.isEligible();
               if(eligible)
                   {
		   System.out.println("Eligible to vote");
                   } 
                 else{
                   System.out.println("Not eligible to vote");
                   }
	}

}
-----------------------------------------------------------------------------------------------------------------
Create a class Calculator with num1,num2 and perform various arithmetic operations like add,subtract,divide,multiply.
Display the result of the operation in main method.

  class Calculator {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

    int add(int num1,int num2){ // the num1 and num2 are parameters and though the variable names are same as that of instance
    // variables but the are local to the add method.
    return num1+num2;
    }

   public static void main(String args[]) {
     Calculator calc=new Calculator();
     int result;
     System.out.println("The result after add is "+result);
   }

  }
---------------------------------------------------------------------------------------------------------------------
 class Calculator1 {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

   
 
    int add(int num1,int num2){ // the num1 and num2 are parameters and though the variable names are same as that of instance
    // variables but the are local to the add method.
    return num1+num2;
    }

   public static void main(String args[]) {
     Calculator1 calc=new Calculator1();
     int result;
     System.out.println("The result after add is "+result);
   }

  }
------------------------------------------------------------------------------------------------------------------------------
 class Calculator2 {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

    void setData(int n1,int n2){
      num1=n1;
      num2=n2;
    }

    void displayNumbers(){
     System.out.println(num1);
     System.out.println(num2);
    }
   
 
    int add(){ 
      int result=num1+num2;
       return result;
    }

    int subtract(){
    int result=num1-num2;
    }

   public static void main(String args[]) {
     Calculator2 calc=new Calculator2();
     calc.setData(2,1);
     calc.displayNumbers();
     int result=calc.add();
     System.out.println("The result after add is "+result);
     result=calc.subtract();
     System.out.println("The result after add is "+result);
   }

  }
Observations:-
* We have num1 and num2 as instance variables.
* We have n1 and n2 are parameters to setData method and are having local scope/access to the setData method.
* We have result local to main method and result local to add and subtract method.
------------------------------------------------------------------------------------------------------------------

public class Demo {
	public void changeValue(int value1, int value2) {
		value1 = value1 + value2;
		value2 = value1 - value2;
		System.out.println(value1 + " " + value2);
	}

    public static void main(String args[]) {
	Demo demo = new Demo();
	int x = 20;
	int y = 10;
	System.out.println(x + " " + y);   // 20 10
	demo.changeValue(x, y);           //  30 20
	System.out.println("After calling changeValue function");
	System.out.println(x + " " + y);   // 20 10
}


}
--------------------------------------------------------------
/* For the below code design a menu based program.
   Following menu we will be having 
   1) ENTER NUMBERS
   2) DISPLAY DATA
   3) SUBTRACT
   4) ADD
   5) DIVIDE
   6) MULTIPLY
   7) EXIT
   Enter your choice
   1
   Enter the num1
   2
   Enter the num2
   3
   1) ENTER NUMBERS
   2) DISPLAY DATA
   3) SUBTRACT
   4) ADD
   5) DIVIDE
   6) MULTIPLY
   7) EXIT
   Enter your choice
   2
   2
   3
   1) ENTER NUMBERS
   2) DISPLAY DATA
   3) SUBTRACT
   4) ADD
   5) DIVIDE
   6) MULTIPLY
   7) EXIT
   Enter your choice
   4
   5
  
class Calculator3 {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

    void setData(int n1,int n2){
      num1=n1;
      num2=n2;
    }

    void displayNumbers(){
     System.out.println(num1);
     System.out.println(num2);
    }
   
 
    int add(){ 
      int result=num1+num2;
       return result;
    }

    int subtract(){
    int result=num1-num2;
    }

   public static void main(String args[]) {
     Calculator2 calc=new Calculator2();
     calc.setData(2,1);
     calc.displayNumbers();
     int result=calc.add();
     System.out.println("The result after add is "+result);
     result=calc.subtract();
     System.out.println("The result after add is "+result);
   }

  }


[ Hint: switch case and loop ]




-------------------------------------------------------------------------------------------------------------------------------------------

Somsasekhar ====> Person eligibility for voting. 
Nagagopichand   ===> 100 people voting and for them eligibility needs to be checked.
 

----------------------------------------------------------------------------------------------------------------------------------
Q Can we convert this scenario into a code?
A Yes
class Person1{
       public static void main(String args[]) {
              String name="Rahul";
              int age=21;
              if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              }
       }
     }   


class Person1b{
       public static void main(String args[]) {
              String name="Rahul";
              int age=21;
              String comment;
              if(age>=18){
                    comment="Eligible for voting";
              }
              else{
                   comment="Not eligible";
                  }
            System.out.println(comment);
       }
     }   


         
 
Q We need to store the details of 100 persons with our limited knowledge. 
A * Taking Array
  * List 
  * for loop
  * Scanner to take user input
class Person2{
     public static void main(String args[]) {
      String name1="Ravi";
      String name2="Ashok";
      String name3="Atul";
      int age_of_name1=20;
      int age_of_name2=18;
  
     }
}
-------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

class Person3{
     public static void main(String args[]) {
         Scanner scan=new Scanner(System.in);  
         int numberOfPeople=100;
         int age;
         String name;
         for(int ctr=1;ctr<=numberOfpeople;ctr++){
             System.out.println("Enter the name");
              name=scan.next();
              System.out.println("Enter the age");
              age=scan.nextInt();
              if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
         } 
 
     }
}

In the above example we are not able to retain the name and age as they are 
getting overwritten by the next value. 
-----------------------------------------------------------------------------------------------------------------------------------
If we talk about person,book,employee,student these are real life entities. 

// The below code wont work because we cannot access non static member from static member
// Cannot make a static reference to the non-static field age
//  Cannot make a static reference to the non-static field name
class Person4a{
     int age;
     String name;
  
    public static void main(String args[]) {
          
            age=18;
            name="Ravi";
            System.out.println(age);
            System.out.println(name);

     }



}

class Person4b{
    static int age;
    static String name;
  
    public static void main(String args[]) {
          
            age=18;
            name="Ravi";
            System.out.println(age);
            System.out.println(name);

     }



}



[In the above code we have kept the roll and name outside the main method
now in the above code roll and name are not local to main method. They are 
now being called as instance variables/member variables/attributes/properties.]


Q How are we going to access the roll and name from main method? Is it the same 
way as before?
A No. We cannot access non static member from static member or block. 


Q Do we have any way out to access the non static member from the static main method?
A Yes. Create an object of the class and with the object access the members.


class Person5{
    int age;
    String name;
  
    public static void main(String args[]) {
            Person5 p=new Person5();
            p.age=19;
            p.name="Ravi";
            System.out.println(p.age);
            System.out.println(p.name);
              if(p.age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 


     }



}


In the above example p is a reference variable which is holding the reference or address
of the newly created object. 
      new Person5(); ===> with new the object is getting created during the runtime .

Person5 p=new Person5();==> In the reference variable p we are storing the address of
the object which got created with new Person5();
The object creation is a two step process.

 Person5 p=null; // p is a reference variable which currently not having any address for an object.
p=new Person5(); // In the reference variable p we are storing the address of the newly created object.
OR
Person5 p=new Person5(); 

similar to writing

int num=10; // declaration and initialisation in the same line.
------------------------------------------------------------------------------------------------------------------------------
Q Still we have not achieved the solution for storing 100 Persons.
A yes.
----------------------------------------------------------------------------------------------------------------
OOP helps a programmer in breaking down the code into smaller modules. These modules (classes) will have state(represented by attributes/variables) and functionality (represented by behavior/methods).

Q I know only one method that is main. So can we write some more methods in the class?
A Yes

class Person6{
    int age;
    String name;
  
     void displayData(){
       age=10;
       name="Akash";
       System.out.println(age);
       System.out.println(name);
        if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
      } 

    public static void main(String args[]) {
            Person6 p=new Person6();
            p.displayData();
     }



}
Q Okie we wrote a displayData() method. Can we plan in such a way that one method will be
for initialising the member variables and another method will be for display of data?
A yes 

public class Person7 {
int age;
String name;

void setData() {
	 age=19;
	 name="Rajesh";	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	
	public static void main(String[] args) {
		Person7 per=new Person7();
		per.setData();
		per.dispData();
		Person7 per2=new Person7();
		per2.dispData();
	}

}
[ In the above code setData and displayData are member methods/functions/behaviour of a class. ]

-----------------------------------------------------------------------------------------------------------------------------------
public class Person8 {
int age;
String name;
void setData() {
	 age=19;
	 name="Rajesh";	
}

 void dispData() {
	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	public static void main(String[] args) {
		Person8 per1=new Person8();
		per1.setData();
		per1.dispData();
		Person8 per2=new Person8();
		per2.setData();
		per2.dispData();
	}

}
 
[ In the above code both the objects are having the same data ]

Q Do we have a solution so that the objects will have different set of data?
A Yes we have two ways
   * Use of Scanner object
   * Passing parameters to the method setData

The first solution:-

import java.util.Scanner;

public class Person9 {
int age;
String name;
// For import press ctr+shift+o
void setData() {
	
	Scanner scan=new Scanner(System.in);
	System.out.println("Enter the age");
	 age=scan.nextInt();
	System.out.println("Enter the name");
	 name=scan.next();	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	
	public static void main(String[] args) {
		Person9 per1=new Person9();
		per1.setData();
		
		Person9 per2=new Person9();
		
		per2.setData();
		System.out.println("The data ");
		per1.dispData();
		per2.dispData();
	}

}



public class Person10 {
int age;
String name;
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData(int a,String n) {
	 age=a;
	 name=n;	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
          if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
public static void main(String[] args) {
		Person10 per1=new Person10();
		per1.setData(18,"Ram");
		
		Person10 per2=new Person10();
		per2.setData(20,"Ashok");
		
		System.out.println("The data ");
		per1.dispData();
		per2.dispData();
	}

}
--------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

public class Person11 {
int age;
String name;
Scanner scan=new Scanner(System.in);
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData() {
         System.out.println("Enter age");
	 age=scan.nextInt();
         System.out.println("Enter name");
	 name=scan.next();	
}

 void dispData() {

	 System.out.println(age);
	 System.out.println(name);
           if(age>=18){
                    System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 
 }
	
	public static void main(String[] args) {
		Person11 per1=new Person11();
		per1.setData(18,"Ram");
	        int ch;
                System.out.println("Enter your choice);
                ch=per1.scan.nextInt();	
		Person11 per2=new Person11();
		per2.setData(20,"Ashok");
		
		System.out.println("The data ");
		per1.dispData();
		per2.dispData();
	}

}
-------------------------------------------------------------------------------------------------
class Customer {

	 String customerId;
	String customerName;
	 long contactNumber;
	String address;

	 void displayCustomerDetails() {
		System.out.println("Displaying customer details \n***************************");
		System.out.println("Customer Id : " + customerId);
		System.out.println("Customer Name : " + customerName);
		System.out.println("Contact Number : " + contactNumber);
		System.out.println("Address : " + address);
		System.out.println();
	}

}

 class Tester{

	public static void main(String[] args) {

		// Object creation
		Customer customer = new Customer();

		// Assigning values to the instance variables
		customer.customerId = "C101";
		customer.customerName = "Stephen Abram";
		customer.contactNumber = 7856341287L;
		customer.address = "D089, St. Louis Street, Springfield, 62729";

		// Displaying the customer details
		customer.displayCustomerDetails();
		// Move the above statement immediately after the object creation
		// statement and observe the output

	}

}
------------------------------------------------------------------------------
Q We have kept the display of being eligible or not in the same method displayData().
  Can we write it in a different method?
A yes

public class Person12 {
int age;
String name;
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData(int a,String n) {
	 age=a;
	 name=n;	
}

void dispData() {

	 System.out.println(age);
	 System.out.println(name);
       
 }

 void isEligible(){
   if(age>=18){
               System.out.println("Eligible for voting");
              }
              else{
                   System.out.println("Not eligible");
              } 
	 

}

public static void main(String[] args) {
		Person12 per1=new Person12();
		per1.setData(18,"Ram");
                
		
		Person12 per2=new Person12();
		per2.setData(20,"Ashok");
                 
		
		System.out.println("The data ");
          
		per1.dispData();
                per1.isEligible();
		per2.dispData();
                per2.isEligible();
	}

}

------------------------------------------------------------------------------------------------
We want to enter Bookdetails name,actualPrice,quantityOrdered,priceAfterDiscount. If the price of the book is more than 1000 or quantity ordered is more than 10, give a discount of 10% otherwise priceAfterDiscount will be same as the actualPrice.
[ FOLLOW THIS TECHNIQUE ]
class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;

 void setBookDetails(String bn,int ap,int qo){
     bookName=bn;
     actualPrice=ap;
     quantityOrdered=qo;
  }

   void displayData(){

   }

   void discountCalculation(){


   } 

   public static void main(String args[]) {
       Book book=new Book();
       book.setBookDetails("Java",500,11);
       book.displayData();
       book.discountCalculation();
       Book book2=new Book();
       book2.setBookDetails("HTML",200,2);
       book2.displayData();
       book2.discountCalculation();
  
   }
}
-----------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;

 void setBookDetails(String bn,int ap,int qo){
     bookName=bn;
     actualPrice=ap;
     quantityOrdered=qo;
  }

   void displayData(){

   }

   void discountCalculation(){


   } 

   public static void main(String args[]) {
       Book book=new Book();
       Scanner scan=new Scanner(System.in);
       System.out.println("Enter the bookName");
       String name=scan.next(); 
       System.out.println("Enter the actual price");
       int price=scan.nextInt();
       System.out.println("Enter the quantity on hand");
       int qo=scan.nextInt();
       book.setBookDetails(name,price,qo);
       book.displayData();
       book.discountCalculation();
  
   }
}
---------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;
 


 void setBookDetails(){
       Scanner scan=new Scanner(System.in);
       System.out.println("Enter the bookName");
       bookName=scan.next(); 
       System.out.println("Enter the actual price");
       actualPrice=scan.nextInt();
       System.out.println("Enter the quantity on hand");
       quantityOrdered=scan.nextInt();
  }

   void displayData(){

   }

   void discountCalculation(){


   } 

   public static void main(String args[]) {
       Book book=new Book();
       book.setBookDetails();
       book.displayData();
       book.discountCalculation();
  
   }
}
--------------------------------------------------------------------------------------------------------------------------

  access_specifier return_type method_name(datatype parameter1,datatype parameter2,datatype parameterN){


  }

Access modifier – defines the access type of the method. You will learn more about this later in the course. 

Return type – the data type of the value returned by the method or void if nothing is returned 

Method name – name of the method 

Parameters – comma separated input values passed to the method, should be () if no parameters are passed 

Method body – the code that defines the functionality of the method 

 ---------------------------------------------------------------------------------------------------------------------------------
We want to enter Bookdetails name,actualPrice,quantityOrdered,priceAfterDiscount. If the price of the book is more than 1000 or quantity ordered is more than 10, give a discount of 10% . If the price of the book is more than 5000 or quantity ordered is more than 50,
give a discount of 20% otherwise give a discount of 5%.




public class Book {
   String bookName;
   int actualPrice;
   int quantityOrdered;
   double priceAfterDiscount;

  void setBookDetails(String bn,int ap,int qo){
     bookName=bn;
     actualPrice=ap;
     quantityOrdered=qo;
  }
 
   void displayData(){
    System.out.println(bookName);
    System.out.println(actualPrice);
    System.out.println(quantityOrdered);
    System.out.println(priceAfterDiscount);
   }

   void discountCalculation(int discount){
     priceAfterDiscount=actualPrice-actualPrice*((float)discount/100);

   } 

   public static void main(String args[]) {
       Book book=new Book();
       book.setBookDetails("Java",500,11);
      if(book.actualPrice>5000 || book.quantityOrdered>50)
          {
           book.discountCalculation(20);
          }
      else if(book.actualPrice>1000  ||  book.quantityOrdered>10)
          {
           book.discountCalculation(10);
          }
       else
        {
         book.discountCalculation(5);
        }
         book.displayData();  

    }  
}

----------------------------------------------------------------------------------------------------------------------------------
Q When we should have parameterized methods?
A When method needs to work with different values for different execution or different objects.
-------------------------------------------------------------------------------------------------------------------------

public class Person13 {
int age;
String name;
// setData is a parameterized method
// as we are passing one int datatype 
// value and one String datatype value
void setData(int a,String n) {
	 age=a;
	 name=n;	
}

void dispData() {

	 System.out.println(age);
	 System.out.println(name);
       
 }

 boolean isEligible(){
   if(age>=18){
              return true;
              }
              return false;
 }

public static void main(String[] args) {
		Person13 per1=new Person13();
		per1.setData(18,"Ram");
                
		
		Person13 per2=new Person13();
		per2.setData(15,"Ashok");
                 
		
		System.out.println("The data ");
          
		per1.dispData();
                boolean eligible=per1.isEligible();
                if(eligible) // if(eligible==true) {}
                   {
		   System.out.println("Eligible to vote");
                   } 
                 else{
                   System.out.println("Not eligible to vote");
                   }
                   per2.dispData(); 
                   eligible=per2.isEligible();
               if(eligible)
                   {
		   System.out.println("Eligible to vote");
                   } 
                 else{
                   System.out.println("Not eligible to vote");
                   }
	}

}
-----------------------------------------------------------------------------------------------------------------
Create a class Calculator with num1,num2 and perform various arithmetic operations like add,subtract,divide,multiply.
Display the result of the operation in main method.

  class Calculator {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

    int add(int num1,int num2){ // the num1 and num2 are parameters and though the variable names are same as that of instance
    // variables but the are local to the add method.
    return num1+num2;
    }

   public static void main(String args[]) {
     Calculator calc=new Calculator();
     int result;
     System.out.println("The result after add is "+result);
   }

  }
---------------------------------------------------------------------------------------------------------------------
 class Calculator1 {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

   
 
    int add(int num1,int num2){ // the num1 and num2 are parameters and though the variable names are same as that of instance
    // variables but the are local to the add method.
    return num1+num2;
    }

   public static void main(String args[]) {
     Calculator1 calc=new Calculator1();
     int result;
     System.out.println("The result after add is "+result);
   }

  }
------------------------------------------------------------------------------------------------------------------------------
 class Calculator2 {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

    void setData(int n1,int n2){
      num1=n1;
      num2=n2;
    }

    void displayNumbers(){
     System.out.println(num1);
     System.out.println(num2);
    }
   
 
    int add(){ 
      int result=num1+num2;
       return result;
    }

    int subtract(){
    int result=num1-num2;
    }

   public static void main(String args[]) {
     Calculator2 calc=new Calculator2();
     calc.setData(2,1);
     calc.displayNumbers();
     int result=calc.add();
     System.out.println("The result after add is "+result);
     result=calc.subtract();
     System.out.println("The result after add is "+result);
   }

  }
Observations:-
* We have num1 and num2 as instance variables.
* We have n1 and n2 are parameters to setData method and are having local scope/access to the setData method.
* We have result local to main method and result local to add and subtract method.
------------------------------------------------------------------------------------------------------------------

public class Demo {
	public void changeValue(int value1, int value2) {
		value1 = value1 + value2;
		value2 = value1 - value2;
		System.out.println(value1 + " " + value2);
	}

    public static void main(String args[]) {
	Demo demo = new Demo();
	int x = 20;
	int y = 10;
	System.out.println(x + " " + y);   // 20 10
	demo.changeValue(x, y);           //  30 20
	System.out.println("After calling changeValue function");
	System.out.println(x + " " + y);   // 20 10
}


}
--------------------------------------------------------------
/* For the below code design a menu based program.
   Following menu we will be having 
   1) ENTER NUMBERS
   2) DISPLAY DATA
   3) SUBTRACT
   4) ADD
   5) DIVIDE
   6) MULTIPLY
   7) EXIT
   Enter your choice
   1
   Enter the num1
   2
   Enter the num2
   3
   1) ENTER NUMBERS
   2) DISPLAY DATA
   3) SUBTRACT
   4) ADD
   5) DIVIDE
   6) MULTIPLY
   7) EXIT
   Enter your choice
   2
   2
   3
   1) ENTER NUMBERS
   2) DISPLAY DATA
   3) SUBTRACT
   4) ADD
   5) DIVIDE
   6) MULTIPLY
   7) EXIT
   Enter your choice
   4
   5
  
class Calculator3 {
   int num1;     // The num1 and num2 here are instance variables
   int num2;

    void setData(int n1,int n2){
      num1=n1;
      num2=n2;
    }

    void displayNumbers(){
     System.out.println(num1);
     System.out.println(num2);
    }
   
 
    int add(){ 
      int result=num1+num2;
       return result;
    }

    int subtract(){
    int result=num1-num2;
    }

   public static void main(String args[]) {
     Calculator2 calc=new Calculator2();
     calc.setData(2,1);
     calc.displayNumbers();
     int result=calc.add();
     System.out.println("The result after add is "+result);
     result=calc.subtract();
     System.out.println("The result after add is "+result);
   }

  }


[ Hint: switch case and loop ]




-------------------------------------------------------------------------------------------------------------------------------------------

